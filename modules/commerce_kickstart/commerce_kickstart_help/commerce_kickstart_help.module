<?php

/**
 * Implementation of hook_menu().
 */
function commerce_kickstart_help_menu() {
  // A menu callback is required when using ajax outside of the Form API.
  $items['admin/commerce_kickstart_help/ajax'] = array(
    'page callback' => 'commerce_kickstart_help_ajax_callback',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_admin_paths().
 */
function commerce_kickstart_admin_paths() {
  $paths = array(
    'help/commerce_kickstart_help' => TRUE,
    'help/commerce_kickstart_help/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_preprocess_page().
 */
function commerce_kickstart_help_preprocess_page(&$vars) {
  if (arg(0) == 'help' && arg(1) == 'commerce_kickstart_help') {
    // Add libraries
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.form');
    drupal_add_library('system', 'ui.accordion');
    drupal_add_js(drupal_get_path('module', 'commerce_kickstart_help') . '/commerce_kickstart_help.js', 'file');
  }
}

/**
 * Page callback.
 */
function commerce_kickstart_help_ajax_callback($type = 'ajax', $var) {
  if ($type == 'ajax') {
    $commands = array();
    $help = variable_get('kickstart_help', array());
    $help[$var] == TRUE ? $help[$var] = FALSE : $help[$var] = TRUE;
    $help[$var] == TRUE ? $value = 'uncheck' : $value = 'check';
    variable_set('kickstart_help', $help);
  }
}

/**
 * Implements hook_advanced_help_topic_alter().
 */
function commerce_kickstart_help_advanced_help_topic_alter(&$output, $popup) {
  preg_match_all('#\#\#(.*)\#\##', $output, $matches);
  array_shift($matches);
  foreach($matches[0] as $match) {
    $output = str_replace('##' . $match . '##',
      render(drupal_get_form('commerce_kickstart_help_form_ajax', $match)),
      $output);
  }
}

function commerce_kickstart_help_form_ajax($form, &$form_state, $id) {
  $values = variable_get('kickstart_help', array());
  $form['changed_command_example'] = array(
    '#title' => t(''),
    '#type' => 'checkbox',
    '#default_value' => isset($values[$id]) ? $values[$id] : FALSE,
    '#ajax' => array(
      'callback' => 'commerce_kickstart_ajax_changed_callback',
    ),
  );
  return $form;
}

/**
 * 'changed' callback.
 *
 * @see ajax_command_changed()
 */
function commerce_kickstart_ajax_changed_callback($form, $form_state) {
  $id = $form_state['build_info']['args'][0];

  $help = variable_get('kickstart_help', array());
  $help[$id] == TRUE ? $help[$id] = FALSE : $help[$id] = TRUE;
  $help[$id] == TRUE ? $value = 'uncheck' : $value = 'check';
  variable_set('kickstart_help', $help);
}

/**
 * Implements hook_block_info().
 *
 */
function commerce_kickstart_help_block_info() {
  $blocks['commerce_kickstart_help'] = array(
    'info' => t('Kickstart Help'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'help/commerce_kickstart_help/getting-started',
    'region' => 'content',
    'status' => TRUE,
    'weight' => 50,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function commerce_kickstart_help_block_view($delta = '') {
  switch ($delta) {
    case 'commerce_kickstart_help':
      $block['subject'] = t('Need help ?');
      $block['content'] = commerce_kickstart_help_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function commerce_kickstart_help_contents($which_block) {
  switch ($which_block) {
    case 'commerce_kickstart_help':
      return array('#markup' => 'Need some help ?');
  }
}

