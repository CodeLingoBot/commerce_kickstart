<?php
/**
 * @file
 * Code for the Demo Store Content architecture feature.
 */

include_once 'commerce_kickstart_product_ui.features.inc';

/**
 * Implements hook_entity_info_alter().
 * Create new view mode for product display, commerce product.
 */
function commerce_kickstart_product_ui_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['product_list'] = array(
    'label' => t('Product list'),
    'custom settings' => TRUE,
  );
  $entity_info['commerce_product']['view modes']['node_product_list'] = array(
    'label' => t('Node: Product list'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function commerce_kickstart_product_ui_theme(&$existing) {
  $themes = array();
  foreach (entity_get_info() as $entity_type => $entity_info) {
    foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
      foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
        $themes["{$entity_type}__{$bundle}__{$view_mode}"] = array(
          'render element' => 'elements',
        );
      }
    }
  }
  if (!empty($existing['facetapi_title']) && $existing['facetapi_title']['function']) {
    $existing['facetapi_title']['function'] = 'theme_commerce_kickstart_product_ui_facetapi_title';
  }
  // Remove commerce product label.
  if ($existing['commerce_product_title']) {
    $existing['commerce_product_title']['path'] = drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme';
    $existing['commerce_product_title']['template'] = 'commerce-product-title';
  }
  // Remove cart block total label & add cart link on item.
  if ($existing['commerce_line_item_summary']) {
    $existing['commerce_line_item_summary']['path'] = drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme';
    $existing['commerce_line_item_summary']['template'] = 'commerce-line-item-summary';
  }
  $themes =  array(
    'node__product__type' => array(
      'path' => drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme',
      'template' => 'node--product--type',
    ),
    'node__product__type__product__list' => array(
      'path' => drupal_get_path('module', 'commerce_kickstart_product_ui') . '/theme',
      'template' => 'node--product--type--product--list',
    ),
  );
  return $themes;
}

/**
 * Override facetapi default title.
 */
function theme_commerce_kickstart_product_ui_facetapi_title($variables) {
  $title = explode(' Â» ', $variables['title']);
  return t(drupal_ucfirst(drupal_strtolower(array_pop($title))));
}

/**
 * Preprocess theme variables for facetapi blocks.
 * Add facet field machine name to block class, make it easier to theme.
 */
function commerce_kickstart_product_ui_preprocess_block(&$variables) {
  if ($variables['block']->module == 'facetapi') {
    $delta = $variables['block']->delta;
    $map = facetapi_get_delta_map();
    $name = $map[$delta];
    $name = explode(':', $name);
    $name = array_pop($name);
    $name = str_replace('%3A', '_', $name);
    $variables['classes_array'][] = $name;
  }
}

/**
 * Override or insert variables into the page template.
 */
function commerce_kickstart_product_ui_preprocess_page(&$vars) {
  $type = array(
    'bags_cases',
    'drinks',
    'hats',
    'shoes',
    'storage_devices',
    'tops',
  );
  if (!empty($vars['node']) && in_array($vars['node']->type, $type)) {
    $vars['title'] = "";
  }
}
/**
 * Override or insert variables into the node template.
 */
function commerce_kickstart_product_ui_preprocess_node(&$vars) {
  $type = array(
    'bags_cases',
    'drinks',
    'hats',
    'shoes',
    'storage_devices',
    'tops',
  );
  if (isset($vars['type']) && in_array($vars['type'], $type)) {
    $vars['theme_hook_suggestions'][] = 'node__product__type';
    $vars['classes_array'][] = 'node-product-type';
    if ($vars['view_mode'] == 'product_list') {
      $vars['theme_hook_suggestions'][] = 'node__product__type__product__list';
      $vars['classes_array'][] = 'node-product-type-product-list';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Link cart block items to cart.
 */
function commerce_kickstart_product_ui_preprocess_commerce_line_item_summary(&$variable) {
  $variable['cart_items'] = l($variable['quantity'], 'cart', array('attributes' => array('class' => array('line-item-quantity'))));
}

/*
 * Implements hook_library().
 */
function commerce_kickstart_product_ui_library() {
  $libraries['jquery_ui_spinner'] = array(
    'title' => 'jQuery Spinner',
    'website' => 'http://github.com/btburnett3/jquery.ui.spinner/',
    'version' => '1.8',
    'js' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.min.js' => array(),
    ),
  );
return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function commerce_kickstart_product_ui_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
    // Add quantity spinner widget
    drupal_add_library('commerce_kickstart_product_ui', 'jquery_ui_spinner');
    drupal_add_css(libraries_get_path('jquery_ui_spinner') . '/ui.spinner.css');
    drupal_add_js('jQuery().ready(function($) {$(\'.form-item-quantity input\').spinner({ min: 1, max: 20, increment: \'fast\' });});', array('type' => 'inline'));

    // Rename add-to-cart form fields label (quantity, color, size)
    $form['quantity']['#title'] = t('Enter Quantity');
    $form['attributes']['field_color']['#title'] = t('Select Color');

    foreach(array_keys($form['attributes']) as $field_name) {
      if (strstr($field_name, 'size')) {
        $form['attributes'][$field_name]['#title'] = t('Select Size');
        break;
      }
    }
  }
  if ($form_id == 'views_exposed_form') {
    $form['search_api_views_fulltext']['#size'] = 40;
    $form['search_api_views_fulltext']['#attributes']['placeholder'] = t('Search');
    $form['submit']['#attributes']['class'][] = 'js-hide';
  }
}
