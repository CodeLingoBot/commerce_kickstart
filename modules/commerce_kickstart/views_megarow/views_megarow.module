<?php

/**
 * Implement hook_menu().
 */
function views_megarow_menu() {
  // Arguments 3 and 4 are view name and current view display.
  $items['views_megarow_update/%/%ctools_js/%/%'] = array(
    'page callback' => 'views_megarow_update_row',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * This callback is just a testing wrapper to display an ajaxified form
 * or its fallback if it's not called through AJAX.
 */
function views_megarow_display_form_wrapper($entity, $js, $form_id, $form_mode) {
  if ($js) {
    module_load_include('inc', 'views_megarow', 'includes/megarow');
    $form_state = array(
      'ajax' => TRUE,
      'build_info' => array('args' => array($entity->entityType(), $entity, $form_mode)),
    );
    $commands = views_megarow_form_wrapper($form_id, $form_state);
    if (!empty($form_state['executed'])) {
      // We'll just overwrite the form output if it was successful.
      $messages = theme('status_messages');
      $message = 'Submission completed. You can now close this row. ' . $messages;
      $commands = array();
      $commands[] = views_megarow_command_display('Submit OK', $message);
      // Invoke a custom event that refresh the table row of this item.
      $commands[] = ajax_command_invoke('.item-' .  $entity->internalIdentifier(), 'trigger', array('refreshRow'));
    }
    print ajax_render($commands); // This function exits.
    exit;
  }
  else {
    return drupal_get_form($form_id, $entity->entityType(), $entity, $form_mode);
  }
}

/**
 * This callback will build and configure one row of the view given in args
 * or its fallback if it's not called through AJAX.
 */
function views_megarow_update_row($entity_id, $js, $view_name = NULL, $display = NULL) {
  // TODO Find something to put in output for nojs case.
  $output = '';
  $commands = array();
  if ($js && isset($view_name) && isset($display)) {
    $view = views_get_view($view_name);
    $view->set_display($display);
    $view->set_arguments(array($entity_id));
    $view->tag .= ', onerow';
    $view->execute_display();
    $view->execute();
    $view->render();

    $domhtml = trim($view->style_plugin->render());
    // Since this rendering don't give use only a <tr> we need to extract only
    // what we want. Plus, if vbo is used on this view, we don't want to
    // replace the actual vbo field because it's refused by drupal during
    // submit. So we remove all <td> execpt vbo one, and replace the others.
    // TODO find a better way to handle udpate of form stuff.
    if (isset($view->field['views_bulk_operations'])) {
      $commands[] = ajax_command_remove('tr.item-' . $entity_id . ' td:not(.views-field-views-bulk-operations)');
      $class = 'views-field-views-bulk-operations';

      $dom = new DOMDocument();
      if($dom->loadHTML($domhtml)) {
        $tds = $dom->getElementsByTagName('td');
        foreach ($tds as $td) {
          $classes = $td->getAttribute('class');
          $class_array = explode(' ', $classes);
          // Sometimes there is a table inside the megarow <tr> so we don't
          // need to render td that are not views field.
          if (in_array('views-field', $class_array)) {
            if (!in_array('views-field-views-bulk-operations', $class_array)) {
              $output = $dom->saveXML($td);
              // We trim the output to remove empty space in front of the string that
              // will result having ajax.js add <div> because he wants a nodetype == 1.
              $commands[] = ajax_command_after('tr.item-' . $entity_id . ' td.' . $class, trim($output));
              $class = $class_array[1];
            }
          }
        }
      }
    }
    // No vbo, let's replace the full <tr>.
    else {
      // We trim the output to remove empty space in front of the string that
      // will result having ajax.js add <div> because he wants a nodetype == 1.
      $commands[] = ajax_command_replace('tr.item-' . $entity_id, trim($domhtml));
    }
    print ajax_render($commands);
  }
  else {
    return $output;
  }
}

/*
 * Implement hook_theme_registry_alter().
 *
 * @TODO: Change for "template path" in hook_views_api() when
 * http://drupal.org/node/1267482 if fixed.
 */
function views_megarow_theme_registry_alter(&$theme_registry) {
  $theme_registry['views_view_table']['path'] = drupal_get_path('module', 'views_megarow') . '/theme';
  // NOT WORKING
  // $theme_registry['views_view_table']['theme path'] = drupal_get_path('module', 'views_megarow') . '/theme';
}

/*
 * Implement hook_preprocess_views_view_table().
 *
 * This preprocess needs to pass after the views one which define 'row_classes'.
 */
function views_megarow_preprocess_views_view_table(&$vars) {
  // Add custom classes and attributes to the table megarows views to help with
  // ajax refresh of a row. data-viewname, data-viewdisplay and data-entity-id
  // are used to create the url callback.
  if ($vars['view']->plugin_name == 'table_megarows') {
    $vars['attributes_array']['data-viewname'] = $vars['view']->name;
    $vars['attributes_array']['data-viewdisplay'] = $vars['view']->current_display;
    $result_entities = $vars['view']->query->get_result_entities($vars['view']->result);

    foreach ($vars['result'] as $count => $result) {
      $entity = $result_entities[1][$count];
      list($entity_id) = entity_extract_ids($result_entities[0], $entity);
      $vars['row_classes'][$count][] = 'item-' . $entity_id;
      $vars['row_attributes'][$count]['data-entity-id'] = $entity_id;
    }
  }
}

/**
 * Dumb test form.
 */
function views_megarow_example_form($form, &$form_state) {
  $form = array();
  $form['item'] = array(
    '#type' => 'textfield',
    '#title' => 'My textfield',
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );
  return $form;
}

/**
 * Implement hook_views_pre_render().
 */
function views_megarow_views_pre_render(&$view) {
  if ($view->plugin_name == 'table_megarows') {
    // Add javascript files needed to render the page and the definition
    // of the extra commands and helpers.
    module_load_include('inc', 'views_megarow', 'includes/megarow');
    views_megarow_add_js();

    $element = array();
    $element['content']['#attached']['js'][] = drupal_get_path('module', 'views_megarow') . '/js/modal.js';
    // Add the Views dropbutton CSS so that links provided by
    // views_handler_field_megarow_links are styled properly.
    // @todo Remove this once http://drupal.org/node/1557662 gets committed.
    $element['content']['#attached']['css'][] = drupal_get_path('module', 'views') . '/css/views-admin.ctools.css';
    $element['content']['#attached']['css'][] = drupal_get_path('module', 'views') . '/css/views-admin.seven.css';

    $view->attachment_before = drupal_render($element);
  }
}

/**
 * Implements hook_views_api().
 */
function views_megarow_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_megarow') . '/includes/views',
  );
}
