<?php

/**
 * @file
 * Provides Search API integration for Commerce Kickstart.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function commerce_kickstart_search_ctools_plugin_api($module, $api) {
  if ($module == "current_search" && $api == "current_search") {
    return array("version" => 1);
  }
  if ($module == "facetapi" && $api == "facetapi_defaults") {
    return array("version" => 1);
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_kickstart_search_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_default_search_api_index().
 *
 * Create an automatic product display index.
 */
function commerce_kickstart_search_default_search_api_index() {
  $items['product_display'] = commerce_kickstart_search_generate_product_display_index(search_api_server_load('frontend'), 'product_display');
  return $items;
}

/**
 * Generate a SearchApiIndex with common defaults configuration.
 *
 * @param SearchApiServer $server
 *  The server the generated index will resides on.
 *
 * @param $index_machine_name
 *  The machine name of the generated index.
 *
 * @return SearchApiIndex
 *  The generated SearchApiIndex.
 */
function commerce_kickstart_search_generate_product_display_index(SearchApiServer $server, $index_machine_name) {
  $product_reference_fields = commerce_info_fields('commerce_product_reference', 'node');
  // We only generated index if there are product display types.
  if (empty($product_reference_fields) || !isset($server->machine_name)) {
    return entity_create('search_api_index', array());
  }
  $title = 'title';
  // Check if we should index the translated title or not.
  if (module_exists('title') && $title_field = title_field_replacement_info('node', 'title')) {
    $title = $title_field['field']['field_name'];
  }
  $values = array(
    'name' => t('Product display'),
    'machine_name' => $index_machine_name,
    'server' => $server->machine_name,
    'item_type' => 'node',
    'enabled' => 1,
    'read_only' => 0,
    'options' => array(
      'index_directly' => 1,
      'cron_limit' => 50,
      'fields' => array(
        'nid' => array(
          'type' => 'integer',
        ),
        'search_api_language' => array(
          'type' => 'string',
        ),
        'type' => array(
          'type' => 'string',
        ),
        $title => array(
          'type' => 'string',
        ),
        'created' => array(
          'type' => 'date',
        ),
        'changed' => array(
          'type' => 'date',
        ),
        'status' => array(
          'type' => 'integer',
        ),
      ),
      'data_alter_callbacks' => array(
        'commerce_kickstart_search_bundle_filter' => array(
          'status' => 1,
          'weight' => -10,
        ),
        'search_api_alter_add_aggregation' => array(
          'status' => 1,
          'weight' => 0,
          'settings' => array(
            'fields' => array(
              'search_api_aggregation_1' => array(
                'name' => t('Title (Fulltext)'),
                'type' => 'fulltext',
                'fields' => array(
                  $title,
                ),
                'description' => t('A Fulltext aggregation of the title field.'),
              ),
            ),
          ),
        ),
      ),
    ),
  );
  // If a product reference field is called field_product, take it.
  if (isset($product_reference_fields['field_product'])) {
    $product_reference_field = $product_reference_fields['field_product'];
  }
  // Else, take the first one.
  else {
    $product_reference_field = reset($product_reference_fields);
  }
  $type = $product_reference_field['cardinality'] !== 1 ? 'list<integer>' : 'integer';
  $values['options']['fields'] += array(
    $product_reference_field['field_name'] => array(
      'type' => $type,
      'entity_type' => 'commerce_product',
    ),
  );
  // Adding fields in the additional fields array  will alow us to browse them.
  $values['options']['additional fields'][$product_reference_field['field_name']] = $product_reference_field['field_name'];
  $values['options']['additional fields'][$product_reference_field['field_name'] . ':commerce_price'] = $product_reference_field['field_name'] . ':commerce_price';

  // Create a temporary node index that allows us to browse the fields.
  $temp_index = entity_create('search_api_index', $values);
  foreach ($temp_index->getFields(FALSE) as $field_name => $field) {
    // Index term reference fields.
    if (isset($field['entity_type']) && $field['entity_type'] == 'taxonomy_term') {
      $values['options']['fields'] += array(
        $field_name =>  array(
          'type' => $field['type'],
          'entity_type' => $field['entity_type'],
        ),
        // We're also indexing the name property of the taxonomy term.
        $field_name . ':name' => array(
          'type' => search_api_nest_type('string', $field['type']),
        ),
      );
    }
    else {
      // Index the price decimal property.
      if ($field_name == $product_reference_field['field_name'] . ':commerce_price:amount_decimal') {
        $values['options']['fields'] += array(
          $field_name =>  array(
            'type' => $field['type'],
          ),
        );
        // Ranges support, we're using the decimal amount (Useful for facets).
        if (search_api_is_list_type($field['type']) && module_exists('search_api_ranges')) {
          $prefix = str_replace(':', '_', $field_name);
          $values['options']['fields'][$prefix . '_asc'] = array(
            'type' => 'decimal',
          );
          $values['options']['fields'][$prefix . '_desc'] = array(
            'type' => 'decimal',
          );
          $values['options']['data_alter_callbacks'] += array(
            'search_api_ranges_alter' => array(
              'status' => 1,
              'weight' => 1,
              'settings' => array(
                'fields' => drupal_map_assoc(array($field_name)),
              ),
            ),
          );
        }
      }
    }
  }
  return entity_create('search_api_index', $values);
}

/**
 * Generate and enable facetapi facets with some defaults.
 *
 * @param $index_machine_name
 *  The machine name of the index.
 *
 * @return array
 *  An array of facets exports with some default configurations.
 */
function commerce_kickstart_search_generate_facets($index_machine_name) {
  $export = array();
  $searcher = 'search_api@' . $index_machine_name;
  $adapter = facetapi_adapter_load($searcher);
  $product_attributes = commerce_info_fields('taxonomy_term_reference', 'commerce_product');
  if (empty($adapter)) {
    return $export;
  }
  $realm = facetapi_realm_load('block');
  foreach (facetapi_get_facet_info($searcher) as $field_name => $facet_info) {
    $export_facet = FALSE;
    if (isset($facet_info['field type']) && $facet_info['field type'] == 'taxonomy_term') {
      $facet = $adapter->getFacetSettings($facet_info, $realm);
      $widget = 'facetapi_checkbox_links';
      $export_facet = TRUE;
    }
    if (strpos($field_name, 'amount_decimal') !== FALSE && strpos($field_name, ':') !== FALSE) {
      $facet = $adapter->getFacetSettings($facet_info, $realm);
      $widget = 'search_api_ranges_ui_slider';
      $export_facet = TRUE;
    }
    if ($export_facet) {
      $facet = $adapter->getFacetSettings($facet_info, $realm);
      $facet->settings['widget'] = $widget;
      $facet->settings['filters'] += array(
        'active_items' => array(
          'status' => 1,
          'weight' => -1,
        ),
      );
      // Adding extra filters to product attribute fields.
      if (!empty($product_attributes)) {
        if (strpos($field_name, ':') !== FALSE) {
          list($prefix, $suffix) = explode(':', $field_name, 2);
          if (isset($product_attributes[$suffix])) {
            $facet->settings['filters'] += array(
              'useless_searches' => array(
                'status' => 1,
                'weight' => 0
              ),
              'hide_search_start' => array(
                'status' => 1,
                'weight' => 1,
              ),
            );
          }
        }
      }
      $facet->api_version = 1;
      $facet->disabled = FALSE;
      $facet->enabled = TRUE;
      $export[$facet->name] = $facet;
    }
  }
  return $export;
}

/**
 * Implements hook_default_search_api_sort().
 */
function commerce_kickstart_search_default_search_api_sort() {
  $items = array();
  $title = 'title';
  // Check if we should sort on the translated title or not.
  if (module_exists('title') && $title_field = title_field_replacement_info('node', 'title')) {
    $title = $title_field['field']['field_name'];
  }
  $items['product_display__created'] = entity_import('search_api_sort', '{
    "index_id" : "product_display",
    "field" : "created",
    "name" : "Latest",
    "enabled" : "1",
    "weight" : "20",
    "identifier" : "product_display__created",
    "default_sort" : "0",
    "default_sort_no_terms" : "0",
    "default_order" : "asc",
    "options" : { "field_name" : "Date created" }
  }');
  $items['product_display__field_product_commerce_price_amount_decimal_asc'] = entity_import('search_api_sort', '{
    "index_id" : "product_display",
    "field" : "field_product_commerce_price_amount_decimal_asc",
    "name" : "Price",
    "enabled" : "1",
    "weight" : "0",
    "identifier" : "product_display__field_product_commerce_price_amount_decimal_asc",
    "default_sort" : "0",
    "default_sort_no_terms" : "0",
    "default_order" : "asc",
    "options" : { "field_name" : "Product variations \\u00bb Price \\u00bb Amount (decimal) (Min)" }
  }');
  $items['product_display__' . $title] = entity_import('search_api_sort', '{
    "index_id" : "product_display",
    "field" : "' . $title . '",
    "name" : "Title",
    "enabled" : "1",
    "weight" : "30",
    "identifier" : "product_display__' . $title . '",
    "default_sort" : "0",
    "default_sort_no_terms" : "0",
    "default_order" : "asc",
    "options" : { "field_name" : "Title" }
  }');
  return $items;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_kickstart_search_entity_property_info_alter(&$info) {
  $properties = &$info['commerce_product']['properties'];
  foreach (field_info_fields() as $field) {
    if ($field['module'] != 'commerce_product_reference') {
      continue;
    }
    $field_name = $field['field_name'];
    foreach ($field['bundles'] as $entity_type => $bundles) {
      $properties[$field_name . '_' . $entity_type] = array(
        'description' => t('A bridge to @entity_type referenced by @field_name', array(
          '@entity_type' => $entity_type,
          '@field_name' => $field_name
        )),
        'getter callback' => 'commerce_kickstart_search_backreference_getter',
        'field' => $field,
        'label' => t('A bridge to @entity_type referenced by @field_name', array(
          '@entity_type' => $entity_type,
          '@field_name' => $field_name
        )),
        'target type' => $entity_type,
        'type' => 'list<' . $entity_type . '>',
      );
    }
  }
}

/**
 * Implements hook_search_api_alter_callback_info().
 */
function commerce_kickstart_search_search_api_alter_callback_info() {
  $callbacks['commerce_kickstart_search_bundle_filter'] = array(
    'name' => t('Product Display filter'),
    'description' => t("Exclude nodes that aren't product displays."),
    'class' => 'CommerceKickstartSearchProductDisplayFilter',
    // Filters should be executed first.
    'weight' => -10,
  );
  return $callbacks;
}

/**
 * Getter callback for retrieving related entities.
 */
function commerce_kickstart_search_backreference_getter($entity, array $options, $name, $type, $info) {
  $entities_ids = array();
  // Retrieve the field.
  $field = $info['field'];
  $entity_target_type = $info['target type'];
  $entity_wrapper = entity_metadata_wrapper($type, $entity);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_target_type, '=')
    ->fieldCondition($field['field_name'], 'product_id', $entity_wrapper->getIdentifier(), '=');
  $result = $query->execute();
  if (isset($result[$entity_target_type])) {
    $entities_ids = array_keys($result[$entity_target_type]);
  }
  return $entities_ids;
}

/**
 * Implements hook_facetapi_filters().
 */
function commerce_kickstart_search_facetapi_filters() {
  $filters = array(
    'useless_searches' => array(
      'handler' => array(
        'label' => t('Hide items that do not change search result.'),
        'class' => 'CommerceKickstartSameSearch',
      ),
    ),
    'hide_search_start' => array(
      'handler' => array(
        'label' => t('Hide if no search is performed.'),
        'class' => 'CommerceKickstartSearchStart',
      ),
    ),
  );

  return $filters;
}

/**
 * Preprocess theme variables for facetapi blocks.
 * Add facet field machine name to block class, make it easier to theme.
 */
function commerce_kickstart_search_preprocess_block(&$variables) {
  if ($variables['block']->module == 'facetapi') {
    $delta = $variables['block']->delta;
    $map = facetapi_get_delta_map();
    $name = $map[$delta];
    $name = explode(':', $name);
    $name = array_pop($name);
    $name = str_replace('%3A', '_', $name);
    $variables['classes_array'][] = $name;
  }
}

/**
 * Remove the breadcrumb on search pages that have the current search shown.
 */
function commerce_kickstart_search_menu_breadcrumb_alter(&$active_trail, $item) {
  if (isset($_GET['f']) || isset($_GET['search_api_views_fulltext'])) {
    $active_trail = array();
  }
}

/**
 * Implements hook_search_api_facetapi_keys_alter().
 *
 * We do not want to see [all items] in breadcrumbs when browsing all
 * products, but only if search term is empty and no facets are used.
 *
 * @see SearchApiFacetapiAdapter::getSearchKeys()
 */
function commerce_kickstart_search_search_api_facetapi_keys_alter(&$keys, $query) {
  if ($keys == '[all items]' && !isset($_GET['f'])) {
    // All products without facets.
    $keys = '';
    drupal_set_breadcrumb(array(l(t('Home'), '<front>'), 'All Products'));
  }
  else {
    if ($keys == '[all items]' && isset($_GET['f'])) {
      // All products with facets.
      drupal_set_breadcrumb(array());
    }
    else {
      if ($keys != '[all items]') {
        // Search result by key with or without facets.
        drupal_set_breadcrumb(array());
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function commerce_kickstart_search_theme_registry_alter(&$theme_registry) {
  $theme_registry['facetapi_title']['function'] = 'theme_commerce_kickstart_search_facetapi_title';
  $theme_registry['current_search_text']['function'] = 'theme_commerce_kickstart_search_current_search_text';

  $theme_registry['search_api_sorts_sort']['theme path'] = drupal_get_path('module', 'commerce_kickstart_search');
  $theme_registry['search_api_sorts_sort']['path'] = $theme_registry['search_api_sorts_sort']['theme path'];
  $theme_registry['search_api_sorts_sort']['file'] = 'commerce_kickstart_search.theme.inc';
  $theme_registry['search_api_sorts_sort']['function'] = 'theme_commerce_kickstart_search_sorts_sort';
  $theme_registry['search_api_sorts_sort']['includes'] = array($theme_registry['search_api_sorts_sort']['path'] . '/' . $theme_registry['search_api_sorts_sort']['file']);
}


/**
 * Override facetapi default title.
 */
function theme_commerce_kickstart_search_facetapi_title($variables) {
  $title = explode(' » ', $variables['title']);
  return drupal_ucfirst(drupal_strtolower(array_pop($title)));
}

/**
 * Override current_search_text theme.
 *
 * Allow HTML.
 */
function theme_commerce_kickstart_search_current_search_text(array $variables) {
  // Initializes output, don't sanitizes text.
  $output = $variables['text'];

  // Adds wrapper markup and CSS classes.
  if ($variables['wrapper'] && $variables['element']) {
    $attributes = array('class' => $variables['class']);
    $element = check_plain($variables['element']);
    $output = '<' . $element . drupal_attributes($attributes) . '>' . $output . '</' . $element . '>';
  }

  return $output;
}

/**
 * Implements hook_block_info_alter().
 */
function commerce_kickstart_search_block_info_alter(&$blocks, $theme, $code_blocks) {
  // Override facetapi blocks label.
  if (isset($blocks['facetapi']['TFVaQKSORCPdrULxfXDnLQZ40xH0Nper'])) {
    $blocks['facetapi']['TFVaQKSORCPdrULxfXDnLQZ40xH0Nper']['title'] = t('Price');
    $blocks['facetapi']['TFVaQKSORCPdrULxfXDnLQZ40xH0Nper']['weight'] = -1;
  }
}
