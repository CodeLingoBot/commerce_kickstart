From 5138b8830532803eb26a956a466b0e86eb5bbf53 Mon Sep 17 00:00:00 2001
From: kotnik <kotnik@16132.no-reply.drupal.org>
Date: Fri, 8 Jun 2012 11:37:11 +0200
Subject: [PATCH] Issue #1350528 by jsacksick, kotnik: Adds support for
 commerce price fields.

---
 includes/callback_search_api_ranges.inc |  130 +++++++++++++++++++++++++++++++
 search_api_ranges.info                  |    3 +-
 search_api_ranges.module                |   22 ++++++
 3 files changed, 154 insertions(+), 1 deletion(-)
 create mode 100644 includes/callback_search_api_ranges.inc

diff --git a/includes/callback_search_api_ranges.inc b/includes/callback_search_api_ranges.inc
new file mode 100644
index 0000000..23d1390
--- /dev/null
+++ b/includes/callback_search_api_ranges.inc
@@ -0,0 +1,130 @@
+<?php
+
+/**
+ * Search API ranges data alteration callback that indexes the min and max
+ * of selected numeric fields.
+ */
+class SearchApiRangesAlter extends SearchApiAbstractAlterCallback {
+
+  protected $min_suffix = '_asc';
+  protected $max_suffix = '_desc';
+
+  public function configurationForm() {
+    // Retrieve indexed fields.
+    $fields = $this->index->getFields(TRUE);
+    $field_options = array();
+    $this->options += array('fields' => array());
+    $eligible_types = array('integer', 'decimal');
+    foreach ($fields as $name => $field) {
+      if (search_api_is_list_type($field['type']) && in_array(search_api_extract_inner_type($field['type']), $eligible_types))  {
+        $field_options[$name] = $field['name'];
+      }
+    }
+    if (!empty($field_options)) {
+      $form['#attached']['css'][] = drupal_get_path('module', 'search_api') . '/search_api.admin.css';
+      $form['fields'] = array(
+        '#type' => 'checkboxes',
+        '#title' => t('Fields to run on'),
+        '#options' => $field_options,
+        '#default_value' => $this->options['fields'],
+        '#attributes' => array('class' => array('search-api-checkboxes-list')),
+      );
+      return $form;
+    }
+  }
+
+  /**
+   * Submit callback for configuration form.
+   */
+  public function configurationFormSubmit(array $form, array &$values, array &$form_state) {
+    $save_index = FALSE;
+    $this->options = $values;
+    if (!empty($values['fields'])) {
+      $values['fields'] = array_filter($values['fields']);
+      if (!isset($this->options['fields']) || ($values['fields'] != $this->options['fields'])) {
+        foreach ($values['fields'] as $field) {
+          $prefix = str_replace(':', '_', $field);
+          $type = search_api_extract_inner_type($this->index->options['fields'][$field]['type']);
+          $this->options['fields'][$prefix . $this->min_suffix] = array(
+            'type' => $type,
+          );
+          $this->options['fields'][$prefix . $this->max_suffix] = array(
+            'type' => $type,
+          );
+        }
+        $save_index = TRUE;
+      }
+    }
+    // Remove non wanted anymore min and max alterations
+    if (!empty($this->options['fields'])) {
+      $alteration_to_remove = array();
+      if (empty($values['fields'])) {
+        $alteration_to_remove = $this->options['fields'];
+        $save_index = TRUE;
+      }
+      else {
+        $alteration_to_remove = array_diff_key($this->options['fields'], $values['fields']);
+        $save_index = TRUE;
+      }
+      foreach ($alteration_to_remove as $key => $value) {
+        $prefix = str_replace(':', '_', $key);
+        if (isset($this->index->options['fields'][$prefix . $this->min_suffix])) {
+          unset($this->index->options['fields'][$prefix . $this->min_suffix]);
+          unset($this->index->options['fields'][$prefix . $this->max_suffix]);
+        }
+      }
+    }
+    if ($save_index) {
+      $this->index->save();
+    }
+    return $values;
+  }
+
+  public function alterItems(array &$items) {
+    if (!$items) {
+      return;
+    }
+    if (!empty($this->options['fields'])) {
+      foreach ($this->options['fields'] as $field) {
+        $required_fields[$field] = array(
+          'type' => search_api_extract_inner_type($this->index->options['fields'][$field]['type']),
+        );
+      }
+      foreach ($items as $item) {
+        $wrapper = $this->index->entityWrapper($item);
+        $fields = search_api_extract_fields($wrapper, $required_fields);
+        foreach ($fields as $name => $f) {
+          $name = str_replace(':', '_', $name);
+          if (!empty($f['value'])) {
+            $item->{$name . '_asc'} = min($f['value']);
+            $item->{$name . '_desc'} = max($f['value']);
+          }
+        }
+      }
+    }
+  }
+
+  public function propertyInfo() {
+    $ret = array();
+    if (!empty($this->options['fields'])) {
+      $index_fields = $this->index->getFields(TRUE);;
+      foreach ($this->options['fields'] as $name => $field) {
+        if (isset($index_fields[$name])) {
+          $prefix = str_replace(':', '_', $name);
+          $ret[$prefix . $this->min_suffix] = array(
+            'label' => $index_fields[$name]['name'] . ' (Min)',
+            'description' => empty($index_fields[$name]['description']) ? '' : $index_fields[$name]['description'],
+            'type' => search_api_extract_inner_type($index_fields[$name]['type']),
+          );
+          $ret[$prefix . $this->max_suffix] = array(
+            'label' => $index_fields[$name]['name'] . ' (Max)',
+            'description' => empty($index_fields[$name]['description']) ? '' : $index_fields[$name]['description'],
+            'type' => search_api_extract_inner_type($index_fields[$name]['type']),
+          );
+        }
+      }
+    }
+    return $ret;
+  }
+
+}
diff --git a/search_api_ranges.info b/search_api_ranges.info
index 9367e29..6089c0f 100644
--- a/search_api_ranges.info
+++ b/search_api_ranges.info
@@ -6,4 +6,5 @@ dependencies[] = search_api_facetapi
 core = 7.x
 package = Search
 
-files[] = plugins/facetapi/widget_links.inc
\ No newline at end of file
+files[] = plugins/facetapi/widget_links.inc
+files[] = includes/callback_search_api_ranges.inc
diff --git a/search_api_ranges.module b/search_api_ranges.module
index ef36bdc..c0b6df2 100644
--- a/search_api_ranges.module
+++ b/search_api_ranges.module
@@ -73,6 +73,15 @@ function search_api_ranges_facetapi_widgets() {
   */
 function search_api_ranges_minmax($variables, $order = 'ASC') {
   $query = $variables['query'];
+  $index = $variables['index'];
+  $order_lower = strtolower($order);
+  // Check if min or max values are indexed for multiple fields.
+  if (search_api_is_list_type($index->options['fields'][$variables['range_field']]['type'])) {
+    $field_name = str_replace(':', '_', $variables['range_field']) . '_' . $order_lower;
+    if (isset($index->options['fields'][$field_name])) {
+      $variables['range_field'] = $field_name;
+    }
+  }
 
   // Alter sort
   $sort = &$query->getSort();
@@ -283,3 +292,16 @@ function search_api_ranges_block_view_form_submit($form, &$form_state) {
 
   drupal_goto($_GET['q'], array('query' => array($params)));
 }
+
+/**
+* Implements hook_search_api_alter_callback_info().
+*/
+function search_api_ranges_search_api_alter_callback_info() {
+  $callbacks['search_api_ranges_alter'] = array(
+    'name' => t('Search API ranges'),
+    'description' => t('Alters all passed item data completely randomly.'),
+    'class' => 'SearchApiRangesAlter',
+    'weight' => 100,
+  );
+  return $callbacks;
+}
-- 
1.7.10.4

